{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, catchError, map, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.databaseUrl = \"http://localhost:5212/api/users\";\n    this.token = 'myChallengeToken';\n    this._isLoggedIn = new BehaviorSubject(false);\n    this.isLoggedIn = this._isLoggedIn.asObservable();\n    this.regisrationSuccesSubject = new BehaviorSubject(false);\n    this.registrationSuccess$ = this.regisrationSuccesSubject.asObservable();\n    this.errorMessage = '';\n    this.userSubject = new BehaviorSubject('');\n    this.user$ = this.userSubject.asObservable();\n    if (localStorage.getItem(this.token)) {\n      this._isLoggedIn.next(true);\n    }\n  }\n  Signup(newUser) {\n    return this.http.post(this.databaseUrl + '/register', newUser).pipe(tap(() => {\n      this.regisrationSuccesSubject.next(true);\n    }), catchError(error => {\n      let errorMessage = error.error;\n      if (error.status === 400 && error.error.message) {\n        errorMessage = error.error.message;\n      }\n      return throwError(errorMessage);\n    }));\n  }\n  login(email, password) {\n    let querryParams = new HttpParams();\n    querryParams = querryParams.append('email', email);\n    querryParams = querryParams.append('password', password);\n    const headers = new HttpHeaders({\n      'content-type': 'application/json'\n    });\n    return this.http.get(`${this.databaseUrl}/login`, {\n      params: querryParams,\n      responseType: 'text',\n      headers\n    }).pipe(tap(response => {\n      localStorage.setItem('myChallengeToken', response);\n      if (response) {\n        this._isLoggedIn.next(true);\n      } else {\n        this._isLoggedIn.next(false);\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem(this.token);\n    this._isLoggedIn.next(false);\n  }\n  getCurrentUser() {\n    let reqHeaders = localStorage.getItem(this.token);\n    // console.log(reqHeaders);\n    return this.http.get(`${this.databaseUrl}/current`).pipe(map(response => {\n      return {\n        ...response,\n        token: localStorage.getItem(this.token)\n      };\n    }));\n  }\n  getUser(id) {\n    return this.http.get(`${this.databaseUrl}/${id}`);\n  }\n  setUserEmail(email) {\n    this.userSubject.next(email);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","HttpParams","BehaviorSubject","catchError","map","tap","throwError","UserService","constructor","http","databaseUrl","token","_isLoggedIn","isLoggedIn","asObservable","regisrationSuccesSubject","registrationSuccess$","errorMessage","userSubject","user$","localStorage","getItem","next","Signup","newUser","post","pipe","error","status","message","login","email","password","querryParams","append","headers","get","params","responseType","response","setItem","logout","removeItem","getCurrentUser","reqHeaders","getUser","id","setUserEmail","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\VVCE\\5\\5.FSD\\ABA\\ang2\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, catchError, map, tap, throwError } from 'rxjs';\nimport { User } from '../modules/user';\nimport { throwError as observableThrowError } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  databaseUrl: string = \"http://localhost:5212/api/users\";\n  private token : string ='myChallengeToken';\n  private _isLoggedIn = new BehaviorSubject(false);\n  isLoggedIn = this._isLoggedIn.asObservable();\n   private regisrationSuccesSubject = new BehaviorSubject<boolean>(false);\n   registrationSuccess$ = this.regisrationSuccesSubject.asObservable();\n\n  errorMessage : string = '';\n   \n  constructor(private http:HttpClient) {\n\n    if(localStorage.getItem(this.token))\n    {\n      this._isLoggedIn.next(true);\n    }\n   }\n\n   \n   Signup(newUser: User) :Observable<any>{\n    return this.http.post(this.databaseUrl + '/register', newUser)\n      .pipe(\n        tap(() => {\n        this.regisrationSuccesSubject.next(true);\n      }),\n\ncatchError((error: HttpErrorResponse) => {\n        let errorMessage = error.error;\n  \n        if (error.status === 400  && error.error.message) {\n\n       errorMessage = error.error.message;\n\n        }\n  \n    return throwError(errorMessage);\n\n      })\n      );\n   }\n \n  \n\n\n   login(email : string, password: string)\n   {\n     let querryParams = new HttpParams();\n     querryParams = querryParams.append('email', email);\n     querryParams = querryParams.append('password', password);\n     const headers = new HttpHeaders({'content-type' : 'application/json'});\n     return this.http.get (`${this.databaseUrl}/login`, {params: querryParams, responseType: 'text', headers})\n     .pipe(tap((response) => {\n      localStorage.setItem('myChallengeToken', response);\n      if (response){\n       \n          this._isLoggedIn.next(true);  \n       \n      }\n      else{\n        this._isLoggedIn.next(false);\n      }\n     }));\n    }\n\n   logout(){\n    localStorage.removeItem(this.token);\n    this._isLoggedIn.next(false);\n   }\n\n   getCurrentUser() : Observable <any>\n   {\n    let reqHeaders = localStorage.getItem(this.token);\n    // console.log(reqHeaders);\n\n    return this.http.get<any>(`${this.databaseUrl}/current`).pipe(\n      map((response)=>{\n        return {\n          ...response,\n          token: localStorage.getItem(this.token),\n        };\n      })\n    );\n     \n    }\n    getUser(id:number): Observable<User>\n    {\n      return this.http.get<User>(`${this.databaseUrl}/${id}`)\n    }\n\n   private userSubject = new BehaviorSubject<string>('');\n   user$ = this.userSubject.asObservable();\n   setUserEmail(email: string)\n   {\n    this.userSubject.next(email)\n   }\n   }\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}