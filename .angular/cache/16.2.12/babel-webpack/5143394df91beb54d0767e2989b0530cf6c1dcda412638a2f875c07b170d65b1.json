{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { jwtDecode } from 'jwt-decode';\nimport { Task } from 'src/app/modules/task';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/todo.service\";\nimport * as i3 from \"src/app/services/user.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction MyDashboardComponent_div_0_form_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 2);\n    i0.ɵɵlistener(\"ngSubmit\", function MyDashboardComponent_div_0_form_5_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.createTask());\n    });\n    i0.ɵɵelementStart(1, \"div\", 3)(2, \"textarea\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function MyDashboardComponent_div_0_form_5_Template_textarea_ngModelChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.newTask.taskname = $event);\n    });\n    i0.ɵɵtext(3, \"          \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\");\n    i0.ɵɵtext(5, \" Add Task \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.newTask.taskname);\n  }\n}\nfunction MyDashboardComponent_div_0_div_6_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r8 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r8.taskname);\n  }\n}\nfunction MyDashboardComponent_div_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Your Tasks:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, MyDashboardComponent_div_0_div_6_li_4_Template, 3, 1, \"li\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.tasks);\n  }\n}\nfunction MyDashboardComponent_div_0_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Please log in to view your tasks.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction MyDashboardComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\")(4, \"div\");\n    i0.ɵɵtemplate(5, MyDashboardComponent_div_0_form_5_Template, 6, 1, \"form\", 1);\n    i0.ɵɵtemplate(6, MyDashboardComponent_div_0_div_6_Template, 5, 1, \"div\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, MyDashboardComponent_div_0_div_7_Template, 3, 0, \"div\", 0);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Welcome, \", ctx_r0.currentuser.name, \"!\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isloggedIn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.tasks.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isloggedIn);\n  }\n}\nexport class MyDashboardComponent {\n  constructor(route, toDoservice, userService) {\n    this.route = route;\n    this.toDoservice = toDoservice;\n    this.userService = userService;\n    this.isloggedIn = false;\n    this.currentuser = {};\n    this.tasks = [];\n    this.newTask = new Task({});\n    this.taskList = [];\n    this.selectedTask = new Task({});\n    this.userId = 1;\n    this.taskCreated = new EventEmitter();\n  }\n  ngOnInit() {\n    this.userService.isLoggedIn.subscribe(loggedIn => {\n      this.isloggedIn = loggedIn;\n      if (loggedIn) {\n        const jwtstring = localStorage.getItem('myChallengeToken');\n        // console.log('Token:', jwtstring);\n        if (jwtstring !== null) {\n          try {\n            const decodedToken = jwtDecode(jwtstring);\n            // console.log('Decoded Token:', decodedToken);\n            if (decodedToken && decodedToken.unique_name) {\n              // console.log('User Name:', decodedToken.unique_name);\n              this.currentuser = {\n                name: decodedToken.unique_name\n              };\n            } else {\n              console.error('Invalid JWT structure:', decodedToken);\n            }\n          } catch (error) {\n            console.error('Error decoding JWT:', error);\n          }\n        } else {\n          this.currentuser = null;\n        }\n      }\n    });\n    this.toDoservice.getTaskByUserId(this.currentuser.userId).subscribe(() => {\n      this.taskList = this.tasks;\n    });\n  }\n  createTask() {\n    this.toDoservice.createTask(this.newTask).subscribe(() => {\n      this.newTask = new Task({});\n      this.taskCreated.emit(true);\n      console.log('Fetching tasks after creation...');\n    });\n  }\n  static #_ = this.ɵfac = function MyDashboardComponent_Factory(t) {\n    return new (t || MyDashboardComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.TodoService), i0.ɵɵdirectiveInject(i3.UserService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MyDashboardComponent,\n    selectors: [[\"app-my-dashboard\"]],\n    outputs: {\n      taskCreated: \"taskCreated\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [3, \"ngSubmit\", 4, \"ngIf\"], [3, \"ngSubmit\"], [1, \"tweet-wrap\"], [\"placeholder\", \"New Task\", \"type\", \"text\", \"name\", \"taskname\", 3, \"ngModel\", \"ngModelChange\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function MyDashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MyDashboardComponent_div_0_Template, 8, 4, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isloggedIn);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.NgModel, i5.NgForm],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","jwtDecode","Task","i0","ɵɵelementStart","ɵɵlistener","MyDashboardComponent_div_0_form_5_Template_form_ngSubmit_0_listener","ɵɵrestoreView","_r5","ctx_r4","ɵɵnextContext","ɵɵresetView","createTask","MyDashboardComponent_div_0_form_5_Template_textarea_ngModelChange_2_listener","$event","ctx_r6","newTask","taskname","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ctx_r1","ɵɵtextInterpolate","task_r8","ɵɵtemplate","MyDashboardComponent_div_0_div_6_li_4_Template","ctx_r2","tasks","MyDashboardComponent_div_0_form_5_Template","MyDashboardComponent_div_0_div_6_Template","MyDashboardComponent_div_0_div_7_Template","ɵɵtextInterpolate1","ctx_r0","currentuser","name","isloggedIn","length","MyDashboardComponent","constructor","route","toDoservice","userService","taskList","selectedTask","userId","taskCreated","ngOnInit","isLoggedIn","subscribe","loggedIn","jwtstring","localStorage","getItem","decodedToken","unique_name","console","error","getTaskByUserId","emit","log","_","ɵɵdirectiveInject","i1","ActivatedRoute","i2","TodoService","i3","UserService","_2","selectors","outputs","decls","vars","consts","template","MyDashboardComponent_Template","rf","ctx","MyDashboardComponent_div_0_Template"],"sources":["D:\\VVCE\\5\\5.FSD\\ABA\\ang2\\src\\app\\components\\my-dashboard\\my-dashboard.component.ts","D:\\VVCE\\5\\5.FSD\\ABA\\ang2\\src\\app\\components\\my-dashboard\\my-dashboard.component.html"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { jwtDecode } from 'jwt-decode';\nimport { Task } from 'src/app/modules/task';\nimport { User } from 'src/app/modules/user';\nimport { TodoService } from 'src/app/services/todo.service';\nimport { UserService } from 'src/app/services/user.service';\n\n\n@Component({\n  selector: 'app-my-dashboard',\n  templateUrl: './my-dashboard.component.html',\n  styleUrls: ['./my-dashboard.component.css']\n})\nexport class MyDashboardComponent implements OnInit{\n\n  isloggedIn: boolean = false;\n  currentuser : any = {};\n  tasks: any[] = [];\n  newTask: Task  = new Task({});\n  taskList: any[] = [];\n  selectedTask: Task = new Task({});\n  userId : number = 1;\n  \n @Output()\n  taskCreated = new EventEmitter\n\n  constructor(private route: ActivatedRoute, private toDoservice : TodoService, private userService : UserService)\n  {  }\n  ngOnInit(): void {\n   \n    this.userService.isLoggedIn.subscribe((loggedIn) => {\n      this.isloggedIn = loggedIn;\n      if (loggedIn) {\n        const jwtstring = localStorage.getItem('myChallengeToken');\n        // console.log('Token:', jwtstring);\n  \n        if (jwtstring !== null) {\n          try {\n            const decodedToken: any = jwtDecode(jwtstring);\n            // console.log('Decoded Token:', decodedToken);\n  \n            if (decodedToken && decodedToken.unique_name) {\n              // console.log('User Name:', decodedToken.unique_name);\n              this.currentuser = { name: decodedToken.unique_name };\n            } else {\n              console.error('Invalid JWT structure:', decodedToken);\n            }\n          } catch (error) {\n            console.error('Error decoding JWT:', error);\n          }\n        } else {\n          this.currentuser = null;\n        }\n      }\n    });\n  \n   \n     this.toDoservice.getTaskByUserId(this.currentuser.userId).subscribe(() => {\n      this.taskList = this.tasks;\n     });\n   \n  }\n\n\n\n \n \n  createTask(): void\n  { \n    this.toDoservice.createTask(this.newTask).subscribe(()=> {\n     this.newTask = new Task({});\n      this.taskCreated.emit(true);\n\n      console.log('Fetching tasks after creation...');\n   \n    });\n  }\n\n  // updateTask(): void {\n  //   this.selectedTask.completed = true;\n\n  //   this.toDoservice.updateTask(this.selectedTask).subscribe(() => {\n   \n  //     this.selectedTask = new Task({});\n  //   });\n  // }\n\n  // deleteTask(taskId: number): void\n  // {\n  //   this.toDoservice.deleteTask(taskId).subscribe(()=> {\n    \n  //     this.selectedTask = new Task({});\n  //   })\n  // }\n}\n\n\n\n","<div *ngIf=\"isloggedIn\">\n<h2>Welcome, {{currentuser.name}}!</h2>\n<div>\n\n\n  <div>\n    <form (ngSubmit)=\"createTask()\" *ngIf=\"isloggedIn\">\n      <div class=\"tweet-wrap\">\n          <textarea placeholder=\"New Task\" type=\"text\" name=\"taskname\" [(ngModel)]=\"newTask.taskname\">\n          </textarea>\n      \n          <button>\n              Add Task\n          </button>\n      </div>\n  </form>\n\n  <div *ngIf=\"tasks.length > 0\">\n    <h3>Your Tasks:</h3>\n    <ul>\n      <li *ngFor=\"let task of tasks\">\n        <span>{{ task.taskname }}</span>\n        <!-- <button (click)=\"updateTask(task)\">Complete</button>\n        <button (click)=\"deleteTask(task.taskId)\">Delete</button> -->\n      </li>\n    </ul>\n  </div>\n</div>\n\n<div *ngIf=\"!isloggedIn\">\n  <p>Please log in to view your tasks.</p>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}