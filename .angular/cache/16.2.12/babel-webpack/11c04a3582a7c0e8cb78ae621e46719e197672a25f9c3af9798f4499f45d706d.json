{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TodoService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5212/api/Task';\n    this.tokenKey = \"myChallengeToken\";\n  }\n  getTaskById(taskId) {\n    return this.http.get(`${this.apiUrl}/${taskId}`);\n  }\n  createTask(newtask) {\n    let reqHeaders = {\n      Authorization: `Bearer ${localStorage.getItem(this.tokenKey)}`\n    };\n    return this.http.post(this.apiUrl, newtask, {\n      headers: reqHeaders\n    });\n  }\n  // updateTask(task: Task) : Observable<Task>\n  // {\n  //   return this.http.put<Task>(`${this.apiUrl}/${task.taskId}`, task);\n  // }\n  //   deleteTask(taskId: number): Observable<Task>\n  //   {\n  //  let reqHeaders = {\n  //   Authorization : `Bearer ${localStorage.getItem(this.tokenKey)}`\n  //  }\n  //  return this.http.delete(`${this.apiUrl}/${taskId}`, {headers: reqHeaders});\n  //   }\n  getTaskByUserId(userId) {\n    return this.http.get(`${this.apiUrl}/user/${userId}`);\n  }\n  getAllTasks() {\n    return this.http.get(`${this.apiUrl}`);\n  }\n  static #_ = this.ɵfac = function TodoService_Factory(t) {\n    return new (t || TodoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoService,\n    factory: TodoService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TodoService","constructor","http","apiUrl","tokenKey","getTaskById","taskId","get","createTask","newtask","reqHeaders","Authorization","localStorage","getItem","post","headers","getTaskByUserId","userId","getAllTasks","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\VVCE\\5\\5.FSD\\ABA\\ang2\\src\\app\\services\\todo.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, map, of, throwError } from 'rxjs';\nimport { Task } from '../modules/task';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoService {\n \napiUrl: string = 'http://localhost:5212/api/Task';\ntokenKey: string = \"myChallengeToken\";\n\n  constructor(private http:HttpClient) { }\n\n  getTaskById(taskId: number): Observable<Task>\n  {\n    return this.http.get<Task>(`${this.apiUrl}/${taskId}`);\n  }\n\n  createTask(newtask:Task): Observable<Task>\n  {\n    let reqHeaders = {\n      Authorization: `Bearer ${localStorage.getItem(this.tokenKey)}`\n    }\n   return this.http.post(this.apiUrl, newtask, {headers: reqHeaders});\n  }\n\n  // updateTask(task: Task) : Observable<Task>\n  // {\n  //   return this.http.put<Task>(`${this.apiUrl}/${task.taskId}`, task);\n  // }\n\n//   deleteTask(taskId: number): Observable<Task>\n//   {\n//  let reqHeaders = {\n//   Authorization : `Bearer ${localStorage.getItem(this.tokenKey)}`\n//  }\n//  return this.http.delete(`${this.apiUrl}/${taskId}`, {headers: reqHeaders});\n//   }\n \n  getTaskByUserId(userId: number)\n  {\n    return this.http.get<Task[]>(`${this.apiUrl}/user/${userId}`);\n     \n  }\n  getAllTasks(): Observable<Task[]>\n  {\n    return this.http.get<Task[]>(`${this.apiUrl}`);\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAKtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAH1B,KAAAC,MAAM,GAAW,gCAAgC;IACjD,KAAAC,QAAQ,GAAW,kBAAkB;EAEI;EAEvCC,WAAWA,CAACC,MAAc;IAExB,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAO,GAAG,IAAI,CAACJ,MAAM,IAAIG,MAAM,EAAE,CAAC;EACxD;EAEAE,UAAUA,CAACC,OAAY;IAErB,IAAIC,UAAU,GAAG;MACfC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACT,QAAQ,CAAC;KAC7D;IACF,OAAO,IAAI,CAACF,IAAI,CAACY,IAAI,CAAC,IAAI,CAACX,MAAM,EAAEM,OAAO,EAAE;MAACM,OAAO,EAAEL;IAAU,CAAC,CAAC;EACnE;EAEA;EACA;EACA;EACA;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EAEEM,eAAeA,CAACC,MAAc;IAE5B,OAAO,IAAI,CAACf,IAAI,CAACK,GAAG,CAAS,GAAG,IAAI,CAACJ,MAAM,SAASc,MAAM,EAAE,CAAC;EAE/D;EACAC,WAAWA,CAAA;IAET,OAAO,IAAI,CAAChB,IAAI,CAACK,GAAG,CAAS,GAAG,IAAI,CAACJ,MAAM,EAAE,CAAC;EAChD;EAAC,QAAAgB,CAAA,G;qBAzCUnB,WAAW,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXxB,WAAW;IAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}